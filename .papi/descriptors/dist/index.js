"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Aju: () => Aju,
  Ajudev: () => Ajudev,
  Ajusage: () => Ajusage,
  Pas: () => Pas,
  Wnd: () => Wnd
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Wnd, Pas, Aju, Ajusage, Ajudev;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    "use strict";
    [minified, commonTrees, tokens] = JSON.parse(`[{"wnd":{"344":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"36":0,"39":1,"41":2,"48":{"0":49,"42":31,"43":31,"44":50,"45":51,"46":52,"47":53},"51":3,"53":4,"97":5,"100":6,"103":7,"104":8,"110":9,"117":10,"119":11,"120":12,"126":{"121":159,"122":161,"123":162,"124":163,"125":166,"UsernameOf":160,"AuthorityOf":164,"UsernameInfoOf":165,"UnbindingUsernames":167},"127":{"141":240,"142":241},"128":{"127":75,"Recoverable":195,"ActiveRecoveries":196},"129":13,"134":{"130":1,"131":211,"132":212,"133":213},"138":14,"140":15,"144":16,"155":17,"159":18,"181":19,"186":20,"189":21,"195":{"190":1,"191":348,"192":349,"193":82,"194":4},"196":12,"198":22,"205":{"199":1,"200":364,"201":31,"202":97,"203":1,"204":365,"LastSpendPeriod":1},"206":{"Delegators":378,"CounterForDelegators":1,"Agents":379,"CounterForAgents":1},"207":12,"211":23,"216":{"212":1,"213":97,"214":151,"215":390},"218":{"217":391},"221":{"219":395,"220":396},"225":{"222":398,"223":1,"224":399},"247":24,"250":25,"254":26,"267":27,"273":28,"278":29,"280":30,"286":31,"289":32,"292":33,"294":34,"295":12,"300":35,"305":36,"306":{"PermanentSlots":497,"PermanentSlotCount":1,"TemporarySlots":498,"TemporarySlotCount":1,"ActiveTemporarySlotCount":1,"MaxTemporarySlots":1,"MaxPermanentSlots":1},"307":12,"310":37,"325":{"311":31,"312":516,"313":408,"314":1,"315":517,"316":518,"317":519,"318":520,"319":521,"320":522,"321":523,"322":2,"323":2,"324":524},"329":38,"331":{"330":562},"332":12,"335":39,"339":40,"342":41,"343":12},"654":{"18":60,"36":61,"39":62,"41":63,"48":64,"51":12,"53":12,"97":65,"100":12,"103":12,"104":66,"110":67,"117":68,"119":12,"120":{"407":152,"408":153,"409":152,"410":154,"411":152,"412":155},"126":{"413":168,"414":169,"415":170,"416":104,"417":171,"418":172,"419":173,"420":45,"421":174,"422":175,"423":176,"424":177,"425":177,"426":178,"427":104,"428":179,"429":180,"430":181,"431":182,"432":182,"433":182,"unbind_username":182,"remove_username":182,"kill_username":182},"127":{"460":242,"461":243,"462":243,"463":104,"464":244,"465":245,"466":246,"467":246,"468":247,"469":248},"128":{"as_recovered":197,"set_recovered":198,"create_recovery":199,"initiate_recovery":168,"vouch_recovery":198,"claim_recovery":168,"close_recovery":200,"remove_recovery":104,"cancel_recovered":168},"129":69,"134":{"440":215,"441":216,"442":217,"443":218,"444":219,"445":220,"446":221,"447":222,"448":223,"449":218},"138":70,"140":{"455":235,"456":155,"457":236,"458":237,"459":104},"144":{"470":253,"471":254,"472":255,"473":256},"155":71,"159":72,"181":73,"186":74,"189":75,"195":{"441":44,"477":351,"488":353,"512":44,"513":44,"514":44,"515":44,"516":352,"517":44},"196":12,"198":{"518":360,"519":360,"520":361,"521":235},"205":{"522":366,"523":367,"524":368,"525":44,"526":44,"527":44},"206":12,"207":12,"211":{"528":106,"529":106,"530":106,"531":106,"532":106,"533":106,"534":106,"535":106,"536":106,"537":106,"538":383,"539":383,"540":106,"541":106,"542":106,"543":106,"544":106,"545":106,"546":106,"547":106,"548":106,"549":106,"550":106,"551":106,"552":106,"553":384,"554":384,"555":106,"556":106,"557":106,"558":106,"559":106,"560":106,"561":106,"562":106,"563":385,"564":386,"565":387,"566":384,"567":106,"568":106,"569":106,"570":106,"571":388,"572":106,"573":389},"216":12,"218":12,"221":{"574":397},"225":12,"247":76,"250":77,"254":12,"267":78,"273":12,"278":79,"280":80,"286":81,"289":12,"292":82,"294":83,"295":{"611":475,"612":465,"613":465,"614":465,"615":476,"616":436},"300":84,"305":85,"306":{"assign_perm_parachain_slot":465,"assign_temp_parachain_slot":499,"unassign_parachain_slot":465,"set_max_permanent_slots":500,"set_max_temporary_slots":500},"307":86,"310":87,"325":{"635":525,"636":526,"637":526,"638":527,"639":528,"640":529,"641":530,"642":530,"643":531,"644":531,"645":532,"646":531,"647":533,"648":534},"329":88,"331":{"485":563,"651":563,"652":564},"332":{"fill_block":568,"trigger_defensive":104},"335":{"653":571,"report_double_voting":570,"report_double_voting_unsigned":570,"report_fork_voting":572,"report_fork_voting_unsigned":572,"report_future_block_voting":573,"report_future_block_voting_unsigned":573},"339":12,"342":12,"343":{"reap_identity":576,"poke_deposit":576}},"900":{"18":{"655":24,"656":25,"657":26,"658":27,"659":27,"660":28,"661":29},"36":12,"39":12,"41":109,"48":110,"51":111,"53":12,"97":{"57":126,"84":132,"674":123,"687":121,"688":122,"689":124,"690":125,"691":26,"692":126,"693":126,"694":127,"695":26,"696":128,"697":129,"698":130,"699":131,"700":131,"701":133},"100":112,"103":12,"104":113,"110":114,"117":115,"119":12,"120":{"708":156,"709":26,"710":26,"711":26,"712":157,"713":158},"126":{"714":68,"715":183,"716":183,"717":184,"718":184,"719":185,"720":186,"721":187,"722":187,"723":187,"724":190,"725":190,"726":191,"727":192,"728":193,"729":191,"730":191,"SubIdentitiesSet":188,"SubIdentityRenamed":189,"UsernameUnbound":194,"UsernameRemoved":194,"UsernameKilled":194},"127":{"749":158,"750":249,"751":250,"752":251,"753":251},"128":{"RecoveryCreated":27,"RecoveryInitiated":201,"RecoveryVouched":202,"RecoveryClosed":201,"AccountRecovered":201,"RecoveryRemoved":203},"129":116,"134":{"733":224,"734":224,"735":225,"736":226,"737":227,"738":227,"739":227,"740":227,"741":227},"138":117,"140":{"745":238,"746":239,"747":26,"748":238},"144":{"754":257,"755":258,"756":259,"757":260},"155":118,"159":119,"181":{"57":315,"692":317,"693":318,"764":314,"765":316,"766":319,"767":320,"768":321,"769":322,"770":323,"771":324,"772":325,"773":326,"774":327,"775":328,"776":329,"777":330,"778":330},"186":{"674":126,"779":335,"780":336,"781":131,"782":26},"189":{"783":345,"784":346,"785":347,"VoteRemoved":347},"195":120,"196":12,"198":{"802":362,"803":362,"804":363},"205":{"672":373,"805":369,"806":370,"807":371,"808":372,"809":374,"810":375,"811":376,"812":48,"813":377,"814":377,"815":48},"206":{"674":380,"783":380,"Released":380,"MigratedDelegation":380},"207":12,"211":12,"216":12,"218":{"816":392,"817":392,"818":393,"819":394},"221":12,"225":12,"247":121,"250":12,"254":12,"267":122,"273":12,"278":123,"280":12,"286":124,"289":12,"292":125,"294":126,"295":12,"300":127,"305":{"764":468,"850":494,"851":494,"852":468,"853":468,"854":468,"855":495,"856":468,"857":496,"858":468},"306":{"PermanentSlotAssigned":418,"TemporarySlotAssigned":418,"MaxPermanentSlotsChanged":501,"MaxTemporarySlotsChanged":501},"307":128,"310":129,"325":{"869":535,"870":536,"871":537,"872":538,"873":539,"874":540,"875":539,"876":539,"877":541,"878":537,"879":542,"880":543,"881":544,"882":545,"883":546,"884":547,"885":537,"886":548,"887":549,"888":549,"889":549,"890":550,"891":543,"892":551},"329":130,"331":{"897":565,"898":566,"899":567},"332":{"DefensiveTestCall":26},"335":12,"339":12,"342":12,"343":{"IdentityReaped":68,"DepositUpdated":577}},"996":{"18":{"901":13,"902":14,"903":1,"904":15,"905":16,"906":1},"36":150,"39":151,"41":152,"48":153,"51":154,"53":12,"97":155,"100":12,"103":12,"104":12,"110":12,"117":156,"119":12,"120":157,"126":{"925":31,"926":31,"927":31,"928":1,"929":1,"930":1,"931":1,"932":1,"UsernameDeposit":31,"UsernameGracePeriod":1},"127":158,"128":{"ConfigDepositBase":31,"FriendDepositFactor":31,"MaxFriends":1,"RecoveryDeposit":31},"129":159,"134":160,"138":12,"140":12,"144":161,"155":162,"159":163,"181":164,"186":152,"189":165,"195":166,"196":12,"198":12,"205":167,"206":{"86":1,"961":292},"207":12,"211":12,"216":12,"218":12,"221":12,"225":12,"247":168,"250":12,"254":12,"267":12,"273":12,"278":12,"280":12,"286":169,"289":12,"292":170,"294":171,"295":12,"300":172,"305":173,"306":{"PermanentSlotLeasePeriodLength":1,"TemporarySlotLeasePeriodLength":1,"MaxTemporarySlotPerLeasePeriod":1},"307":{"988":1,"989":502},"310":174,"325":12,"329":175,"331":12,"332":12,"335":156,"339":12,"342":12,"343":12},"1107":{"175":186,"1000":{"997":578,"998":579,"999":580},"1008":{"1004":584,"1005":585,"1006":586,"1007":587},"1010":{"1009":588},"1012":187,"1044":{"1013":590,"1014":591,"1015":592,"1016":593,"1017":594,"1018":595,"1019":596,"1020":597,"1021":598,"1022":599,"1023":600,"1024":601,"1025":602,"1026":603,"1027":604,"1028":605,"1029":590,"1030":606,"1031":607,"1032":608,"1033":609,"1034":610,"1035":611,"1036":596,"1037":612,"1038":613,"1039":583,"1040":614,"1041":596,"1042":615,"1043":616},"1048":{"1045":617,"1046":618,"1047":622,"submit_report_double_voting_unsigned_extrinsic":619,"submit_report_fork_voting_unsigned_extrinsic":620,"submit_report_future_block_voting_unsigned_extrinsic":621,"generate_ancestry_proof":623},"1054":188,"1057":189,"1061":190,"1066":191,"1068":192,"1071":193,"1073":194,"1078":195,"1081":{"1076":643,"1077":644,"1079":645,"1080":646},"1086":{"1082":647,"1083":648,"1084":649,"1085":650},"1089":{"1087":651,"1088":652},"1091":{"1090":653},"1099":{"1092":654,"1093":655,"1094":656,"1095":657,"1096":658,"1097":659,"1098":660,"member_total_balance":654,"pool_balance":657,"pool_accounts":661},"1102":196,"1106":197,"TrustedQueryApi":{"is_trusted_reserve":668,"is_trusted_teleporter":668}}},"pas":{"344":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":669,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"36":0,"39":1,"41":2,"48":{"0":49,"42":31,"43":31,"44":50,"45":51,"46":678,"47":53},"51":3,"53":4,"97":5,"100":6,"103":7,"104":8,"110":9,"117":10,"119":11,"120":12,"127":{"141":705,"142":241},"129":13,"134":{"130":1,"131":672,"132":212,"133":213},"138":14,"140":15,"144":16,"155":17,"159":18,"181":19,"186":20,"189":21,"195":{"190":1,"191":683,"192":349,"193":82,"194":4},"196":12,"198":22,"205":{"199":1,"200":364,"201":31,"202":97,"203":1,"204":680},"207":12,"211":23,"216":{"212":1,"213":97,"214":151,"215":738},"218":{"217":739},"221":{"219":395,"220":742},"225":{"222":398,"223":1,"224":745,"AvailabilityCores":744},"247":24,"250":25,"254":26,"267":27,"273":28,"278":29,"280":30,"289":32,"292":33,"294":34,"300":35,"305":36,"307":12,"325":42,"329":38,"331":{"330":788},"335":39,"339":40,"342":41,"1108":{"129":688,"1108":687,"Total":31,"Signing":689,"Preclaims":690},"1109":{"1109":716,"BountyCount":1,"BountyDescriptions":5,"BountyApprovals":97},"1110":{"1110":728,"ChildBountyCount":1,"ParentChildBounties":82,"ChildBountyDescriptions":5,"ChildrenCuratorFees":88},"1111":31,"1112":{"MigrationProcess":748,"AutoLimits":749,"SignedMigrationMaxLimits":750},"1113":12},"654":{"18":60,"36":61,"39":62,"41":63,"48":64,"51":12,"53":12,"97":65,"100":12,"103":12,"104":66,"110":67,"117":68,"119":12,"120":{"407":698,"408":699,"409":698,"410":700,"411":698,"412":701},"127":{"460":706,"461":707,"462":707,"463":104,"464":708,"465":709,"466":246,"467":246,"468":247,"469":710},"129":69,"134":{"440":673,"441":216,"442":674,"443":218,"444":675,"445":676,"446":221,"447":222,"448":223,"449":218},"138":70,"140":{"455":685,"456":701,"457":236,"458":795,"459":104},"144":{"470":713,"471":714,"472":255,"473":256},"155":71,"159":72,"181":73,"186":74,"189":75,"195":{"441":44,"477":684,"488":353,"512":44,"513":44,"514":44,"515":44,"516":352,"517":44},"196":12,"198":{"518":360,"519":360,"520":361,"521":685},"205":{"522":366,"523":367,"524":681,"525":44,"526":44,"527":44},"207":12,"211":{"528":106,"529":106,"530":106,"531":106,"532":106,"533":106,"534":106,"535":106,"536":106,"537":106,"538":383,"539":383,"540":106,"541":106,"542":106,"543":106,"544":106,"545":106,"546":106,"547":106,"548":106,"549":106,"550":106,"551":106,"552":106,"553":384,"554":384,"555":106,"556":106,"557":106,"558":106,"559":106,"560":106,"561":106,"562":106,"563":385,"564":386,"565":387,"566":384,"567":106,"568":106,"569":106,"570":106,"571":388,"572":106,"573":389,"set_max_availability_timeouts":106,"set_on_demand_ttl":106},"216":12,"218":12,"221":{"574":743},"225":12,"247":76,"250":77,"254":12,"267":78,"273":12,"278":79,"280":80,"289":12,"292":82,"294":83,"300":84,"305":85,"307":86,"325":89,"329":88,"331":{"485":789,"651":789,"652":790},"335":{"356":570,"357":570,"653":571},"339":12,"342":12,"1108":{"360":692,"mint_claim":693,"claim_attest":694,"attest":695,"move_claim":696},"1109":{"1114":720,"1115":719,"1116":719,"propose_bounty":718,"approve_bounty":719,"award_bounty":721,"claim_bounty":719,"close_bounty":719,"extend_bounty_expiry":722},"1110":{"1114":730,"1115":731,"1116":731,"add_child_bounty":729,"award_child_bounty":732,"claim_child_bounty":731,"close_child_bounty":731},"1111":81,"1112":{"control_auto_migration":751,"continue_migrate":752,"migrate_custom_top":753,"migrate_custom_child":754,"set_signed_max_limits":755,"force_set_progress":756},"1113":{"611":475,"612":465,"613":465,"614":465,"615":794,"616":436}},"900":{"18":{"655":24,"656":671,"657":26,"658":27,"659":27,"660":28,"661":29},"36":12,"39":12,"41":109,"48":110,"51":111,"53":12,"97":{"57":126,"84":132,"674":123,"687":121,"688":122,"689":124,"690":125,"691":26,"692":126,"693":126,"694":127,"695":26,"696":128,"697":679,"698":130,"699":131,"700":131,"701":133},"100":112,"103":12,"104":113,"110":114,"117":115,"119":12,"120":{"708":702,"709":26,"710":26,"711":26,"712":703,"713":704},"127":{"749":704,"750":711,"751":250,"752":712,"753":712},"129":116,"134":{"733":224,"734":224,"735":677,"736":226,"737":227,"738":227,"739":227,"740":227,"741":227},"138":117,"140":{"745":796,"746":239,"747":26,"748":796},"144":{"754":257,"755":258,"756":715,"757":260},"155":118,"159":119,"181":{"57":315,"692":317,"693":318,"764":314,"765":316,"766":319,"767":320,"768":736,"769":322,"770":323,"771":324,"772":325,"773":326,"774":327,"775":328,"776":329,"777":330,"778":330},"186":{"674":126,"779":737,"780":336,"781":131,"782":26},"189":{"783":345,"784":346},"195":120,"196":12,"198":{"802":362,"803":362,"804":686},"205":{"672":373,"805":369,"806":370,"807":371,"808":372,"809":374,"810":375,"811":682,"812":48,"813":377,"814":377,"815":48},"207":12,"211":12,"216":12,"218":{"816":740,"817":740,"818":741,"819":394},"221":12,"225":12,"247":121,"250":12,"254":12,"267":122,"273":12,"278":123,"280":12,"289":12,"292":125,"294":126,"300":127,"305":{"764":468,"850":494,"851":494,"852":468,"853":468,"854":468,"855":746,"856":468,"857":496,"858":468},"307":128,"325":131,"329":130,"331":{"897":791,"898":792,"899":793},"335":12,"339":12,"342":12,"1108":{"1117":697},"1109":{"BountyProposed":48,"BountyRejected":723,"BountyBecameActive":48,"BountyAwarded":724,"BountyClaimed":725,"BountyCanceled":48,"BountyExtended":48,"BountyApproved":48,"CuratorProposed":726,"CuratorUnassigned":727,"CuratorAccepted":726},"1110":{"734":733,"806":734,"1117":735,"Added":733},"1111":124,"1112":{"674":66,"Migrated":757,"AutoMigrationFinished":26,"Halted":758},"1113":12},"996":{"18":176,"36":150,"39":151,"41":152,"48":153,"51":154,"53":12,"97":155,"100":12,"103":12,"104":12,"110":12,"117":156,"119":12,"120":157,"127":158,"129":159,"134":160,"138":12,"140":12,"144":161,"155":162,"159":163,"181":164,"186":152,"189":165,"195":166,"196":12,"198":12,"205":167,"207":12,"211":12,"216":12,"218":12,"221":12,"225":12,"247":168,"250":12,"254":12,"267":12,"273":12,"278":12,"280":12,"289":12,"292":170,"294":171,"300":172,"305":173,"307":{"988":1,"989":747},"325":12,"329":175,"331":12,"335":156,"339":12,"342":12,"1108":{"Prefix":691},"1109":{"979":31,"BountyDepositBase":31,"BountyDepositPayoutDelay":1,"BountyUpdatePeriod":1,"CuratorDepositMultiplier":1,"CuratorDepositMax":717,"CuratorDepositMin":717,"BountyValueMinimum":31,"MaximumReasonLength":1},"1110":{"MaxActiveChildBountyCount":1,"ChildBountyValueMinimum":31},"1111":169,"1112":{"MaxKeyLen":1},"1113":12},"1107":{"175":186,"1000":198,"1008":{"1004":799,"1005":585,"1006":586,"1007":587},"1010":199,"1012":187,"1044":{"1013":590,"1014":591,"1015":801,"1016":593,"1017":594,"1018":595,"1019":596,"1020":597,"1021":802,"1022":803,"1023":600,"1024":601,"1025":602,"1026":804,"1027":604,"1028":605,"1029":590,"1030":606,"1031":607,"1032":608,"1033":609,"1034":610,"1035":611,"1036":596,"1037":805,"1038":613,"1039":583,"1040":614,"1041":596,"1042":615,"1043":806},"1048":{"1045":617,"1046":618,"1047":622,"1059":619},"1054":188,"1057":189,"1061":190,"1066":191,"1068":192,"1071":193,"1073":194,"1078":195,"1081":{"1076":643,"1077":644,"1079":807,"1080":808},"1086":{"1082":809,"1083":810,"1084":811,"1085":812},"1089":{"1087":813,"1088":814},"1091":{"1090":815},"1099":{"1092":654,"1093":655,"1094":656,"1095":657,"1096":658,"1097":659,"1098":660},"1102":196,"1106":197,"Inflation":{"experimental_inflation_prediction_info":797}}},"aju":{"344":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":816,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"RandomMaterial":151},"39":1,"48":{"0":49,"42":31,"43":31,"44":50,"45":51,"46":865,"47":866},"51":3,"53":4,"110":{"64":74,"95":97,"105":1,"106":2,"107":884,"108":885,"109":143},"120":12,"126":43,"127":{"141":851,"142":241},"129":44,"134":{"130":1,"131":859,"132":212,"133":213},"138":14,"144":16,"205":{"199":1,"200":364,"201":31,"202":97,"203":1,"204":912},"329":{"326":894,"327":895,"328":896},"1118":{"240":821,"UnincludedSegment":818,"AggregatedUnincludedSegment":819,"PendingValidationCode":691,"NewValidationCode":691,"ValidationData":820,"DidSetValidationCode":2,"LastRelayChainBlockNumber":1,"UpgradeGoAhead":822,"RelayStateProof":823,"RelevantMessagingState":824,"HostConfiguration":825,"LastDmqMqcHead":6,"LastHrmpMqcHeads":826,"ProcessedDownwardMessages":1,"HrmpWatermark":1,"HrmpOutboundMessages":827,"UpwardMessages":823,"PendingUpwardMessages":823,"UpwardDeliveryFeeFactor":31,"AnnouncedHrmpMessagesPerCandidate":1,"ReservedXcmpWeightOverride":214,"ReservedDmpWeightOverride":214,"CustomValidationHeadData":691},"1119":{"ParachainId":1},"1123":{"56":74,"CandidateList":872,"LastAuthoredBlock":290,"DesiredCandidates":1,"CandidacyBond":31},"1124":45,"1125":{"20":151,"SlotInfo":887},"1126":{"253":88,"InboundXcmpSuspended":97,"OutboundXcmpStatus":888,"OutboundXcmpMessages":889,"SignalMessages":5,"QueueConfig":890,"QueueSuspended":2},"1127":42,"1128":12,"1129":12,"1130":12,"1135":46,"1136":47,"1137":46,"1138":47,"1149":48,"1157":{"205":88,"1150":73,"1151":961,"1152":962,"1153":964,"1154":406,"1155":965,"1156":969,"Treasurer":960,"WhitelistedAccounts":74,"SeasonMetas":963,"GlobalConfigs":966,"Avatars":967,"Owners":968,"LockedAvatars":359,"CollectionId":1,"PlayerConfigs":290,"TradeStatsMap":970,"SeasonStats":971,"Trade":972,"ServiceAccount":73,"Preparation":409,"TournamentRankers":973},"1158":{"0":1019,"Collection":1018,"OwnershipAcceptance":290,"CollectionAccount":1020,"CollectionRoleOf":1021,"Item":1022,"CollectionMetadataOf":1023,"ItemMetadataOf":1024,"Attribute":1025,"ItemPriceOf":1026,"ItemAttributesApprovalsOf":1027,"NextCollectionId":1,"PendingSwapOf":1028,"CollectionConfigOf":1029,"ItemConfigOf":972},"1159":{"NftStatuses":1091},"1165":{"1160":1093,"1161":1094,"1162":1095,"1163":1,"1164":960},"1175":{"1166":1099,"1167":960,"1168":82,"1169":1100,"1170":1101,"1171":1102,"1172":1103,"1173":1104,"1174":1105},"1178":49,"1179":{"AssetIdLocation":1149,"AssetLocationId":1150},"1180":49,"1181":{"Pools":1154,"NextPoolAssetId":1},"1182":12},"654":{"18":60,"23":12,"39":62,"48":64,"51":12,"53":12,"110":{"404":886,"405":104},"120":{"407":838,"408":839,"409":838,"410":840,"411":838,"412":841},"126":90,"127":{"460":852,"461":853,"462":853,"463":104,"464":854,"465":855,"466":246,"467":246,"468":247,"469":856},"129":91,"134":{"440":860,"441":216,"442":861,"443":218,"444":862,"445":863,"446":221,"447":222,"448":223,"449":218},"138":70,"144":{"470":835,"471":836,"472":255,"473":256},"205":{"522":366,"523":367,"524":913,"525":44,"526":44,"527":44},"329":{"649":897,"650":898},"1118":{"353":830,"set_validation_data":828,"sudo_send_upward_message":829,"enact_authorized_upgrade":19},"1119":12,"1123":{"387":873,"set_desired_candidates":874,"set_candidacy_bond":875,"register_as_candidate":104,"leave_intent":104,"add_invulnerable":576,"remove_invulnerable":576,"update_bond":876,"take_candidate_slot":877},"1124":12,"1125":12,"1126":{"suspend_xcm_execution":104,"resume_xcm_execution":104,"update_suspend_threshold":106,"update_drop_threshold":106,"update_resume_threshold":106},"1127":89,"1128":12,"1129":{"361":904,"transfer_multiasset":905,"transfer_with_fee":906,"transfer_multiasset_with_fee":907,"transfer_multicurrencies":908,"transfer_multiassets":909},"1130":{"send_as_sovereign":767},"1135":92,"1136":93,"1137":92,"1138":93,"1149":94,"1157":{"1208":974,"1209":978,"1210":981,"1211":991,"1212":992,"1213":993,"1214":994,"1215":995,"1216":997,"1217":983,"1218":998,"1219":998,"forge":975,"transfer_avatar":976,"transfer_free_mints":977,"remove_price":979,"buy":979,"upgrade_storage":980,"set_treasurer":982,"claim_treasury":983,"set_season":984,"update_global_config":985,"set_free_mints":986,"set_collection_id":987,"lock_avatar":979,"unlock_avatar":979,"set_service_account":988,"prepare_avatar":979,"unprepare_avatar":979,"prepare_ipfs":989,"modify_freemint_whitelist":990,"enable_set_avatar_price":992,"enable_avatar_transfer":992,"set_unlock_config":996,"force_set_affiliatee_state":999},"1158":{"361":1036,"372":1035,"485":1030,"488":1050,"1208":1033,"1209":1056,"1220":1031,"1221":1039,"1222":1040,"1223":1043,"1224":1044,"1225":1035,"destroy":1032,"force_mint":1034,"redeposit":1037,"lock_item_transfer":1035,"unlock_item_transfer":1035,"lock_collection":1038,"force_collection_owner":1041,"force_collection_config":1042,"clear_all_transfer_approvals":1035,"lock_item_properties":1045,"set_attribute":1046,"force_set_attribute":1047,"clear_attribute":1048,"approve_item_attributes":1044,"cancel_item_attributes_approval":1049,"set_collection_metadata":1051,"clear_collection_metadata":1052,"set_accept_ownership":1053,"set_collection_max_supply":1054,"update_mint_settings":1055,"buy_item":1057,"pay_tips":1058,"create_swap":1059,"cancel_swap":1060,"claim_swap":1061,"mint_pre_signed":1062,"set_attributes_pre_signed":1063},"1159":12,"1165":12,"1175":12,"1178":95,"1179":{"register_reserve_asset":1151,"unregister_reserve_asset":1152},"1180":95,"1181":{"1238":1156,"create_pool":1156,"add_liquidity":1157,"remove_liquidity":1158,"swap_exact_tokens_for_tokens":1159,"swap_tokens_for_exact_tokens":1160},"1182":12},"900":{"18":{"655":24,"656":817,"657":26,"658":27,"659":27,"660":28,"661":29},"23":12,"39":12,"48":110,"51":111,"53":12,"110":114,"120":{"708":842,"709":26,"710":26,"711":26,"712":843,"713":844},"126":132,"127":{"749":844,"750":857,"751":250,"752":858,"753":858},"129":133,"134":{"733":224,"734":224,"735":864,"736":226,"737":227,"738":227,"739":227,"740":227,"741":227},"138":117,"144":{"754":257,"755":258,"756":837,"757":260},"205":{"672":373,"805":369,"806":370,"807":371,"808":372,"809":374,"810":375,"811":914,"812":48,"813":48,"814":48,"815":48},"329":{"893":899,"894":900,"895":901,"896":902},"1118":{"ValidationFunctionStored":26,"ValidationFunctionApplied":831,"ValidationFunctionDiscarded":26,"DownwardMessagesReceived":832,"DownwardMessagesProcessed":833,"UpwardMessageSent":834},"1119":12,"1123":{"NewInvulnerables":878,"InvulnerableAdded":879,"InvulnerableRemoved":879,"NewDesiredCandidates":880,"NewCandidacyBond":881,"CandidateAdded":882,"CandidateBondUpdated":882,"CandidateRemoved":879,"CandidateReplaced":883,"InvalidInvulnerableSkipped":879},"1124":12,"1125":12,"1126":{"XcmpMessageSent":891},"1127":131,"1128":{"InvalidFormat":892,"UnsupportedVersion":892,"ExecutedDownward":893},"1129":{"TransferredAssets":910},"1130":{"870":911},"1135":134,"1136":135,"1137":134,"1138":135,"1149":136,"1157":{"1264":1000,"1265":1005,"1266":418,"ServiceAccountSet":1001,"CollectionIdSet":1002,"TreasurerSet":1003,"TreasuryClaimed":1004,"UpdatedGlobalConfig":1006,"AvatarsMinted":1007,"AvatarsForged":1008,"AvatarTransferred":1009,"SeasonFinished":418,"FreeMintsTransferred":1010,"FreeMintsSet":1011,"AvatarPriceSet":1012,"AvatarPriceUnset":1013,"AvatarTraded":1014,"AvatarLocked":1013,"AvatarUnlocked":1013,"StorageTierUpgraded":1015,"PreparedAvatar":1013,"UnpreparedAvatar":1013,"PreparedIpfsUrl":1016,"UpdatedUnlockConfigs":1017},"1158":{"676":1067,"680":1067,"764":1064,"766":1066,"1267":1065,"1268":1068,"1269":1071,"1270":1072,"1271":1074,"ItemTransferLocked":1069,"ItemTransferUnlocked":1069,"ItemPropertiesLocked":1070,"CollectionLocked":1066,"TransferApproved":1073,"AllApprovalsCancelled":1067,"CollectionConfigChanged":1066,"CollectionMetadataSet":1075,"CollectionMetadataCleared":1066,"ItemMetadataSet":1076,"ItemMetadataCleared":1069,"Redeposited":1077,"AttributeSet":1078,"AttributeCleared":1079,"ItemAttributesApprovalAdded":1080,"ItemAttributesApprovalRemoved":1080,"OwnershipAcceptanceChanged":1081,"CollectionMaxSupplySet":1082,"CollectionMintSettingsUpdated":1066,"NextCollectionIdIncremented":1083,"ItemPriceSet":1084,"ItemPriceRemoved":1069,"ItemBought":1085,"TipSent":1086,"SwapCreated":1087,"SwapCancelled":1087,"SwapClaimed":1088,"PreSignedAttributesSet":1089,"PalletAttributeSet":1090},"1159":{"ItemStored":1092,"ItemRestored":1092},"1165":{"1272":1096,"1273":1097,"1274":1098,"1275":1098},"1175":{"1276":1106,"1277":1106,"1278":1106,"1279":1106,"1280":1106,"1281":1107,"1282":1108,"1283":1109,"1284":1109},"1178":137,"1179":{"ReserveAssetRegistered":1153,"ReserveAssetUnregistered":1153},"1180":137,"1181":{"1294":1166,"PoolCreated":1161,"LiquidityAdded":1162,"LiquidityRemoved":1163,"SwapExecuted":1164,"SwapCreditExecuted":1165},"1182":{"AssetTxFeePaid":1167,"AssetRefundFailed":1168}},"996":{"18":176,"23":12,"39":151,"48":153,"51":154,"53":12,"110":12,"120":157,"126":177,"127":158,"129":178,"134":160,"138":12,"144":161,"205":167,"329":175,"1118":{"SelfParaId":1},"1119":12,"1123":12,"1124":179,"1125":12,"1126":{"MaxInboundSuspended":1,"MaxActiveOutboundChannels":1,"MaxPageSize":1},"1127":12,"1128":12,"1129":{"SelfLocation":903,"BaseXcmWeight":214,"RateLimiterId":395},"1130":12,"1135":180,"1136":12,"1137":180,"1138":12,"1149":181,"1157":{"961":292,"1309":1,"1310":1,"FeeChainMaxLength":1},"1158":{"1309":1,"1310":1,"1311":31,"1312":1,"CollectionDeposit":31,"ItemDeposit":31,"AttributeDepositBase":31,"DepositPerByte":31,"ApprovalsLimit":1,"ItemAttributesApprovalsLimit":1,"MaxTips":1,"MaxDeadlineDuration":1,"MaxAttributesPerCall":1,"Features":31},"1159":{"961":292,"1309":1,"1310":1},"1165":{"1313":1},"1175":182,"1178":183,"1179":12,"1180":183,"1181":{"961":292,"LPFee":1,"PoolSetupFee":31,"PoolSetupFeeAsset":1155,"LiquidityWithdrawalFee":1,"MintMinLiquidity":31,"MaxSwapPathLength":1},"1182":12},"1107":{"175":186,"1000":198,"1008":{"1004":1170,"1005":585,"1006":586,"1007":587},"1010":199,"1012":187,"1071":193,"1073":194,"1078":195,"1106":197,"1321":200,"AuraUnincludedSegmentApi":{"can_build_upon":1169},"CollectCollationInfo":{"collect_collation_info":1171}}},"ajusage":{"344":{"18":50,"39":1,"48":51,"51":3,"117":10,"120":12,"126":43,"127":52,"129":44,"134":53,"138":14,"140":15,"144":16,"205":54,"1124":45,"1135":55,"1137":55,"1149":48,"1178":49,"1322":37,"1323":56,"1324":57,"1332":58,"1340":59},"654":{"18":60,"39":62,"48":64,"51":12,"117":96,"120":97,"126":90,"127":98,"129":91,"134":99,"138":70,"140":100,"144":101,"205":102,"1124":12,"1135":103,"1137":103,"1149":94,"1178":104,"1322":87,"1323":105,"1324":106,"1332":107,"1340":108},"900":{"18":138,"39":12,"48":110,"51":111,"117":115,"120":139,"126":132,"127":140,"129":133,"134":141,"138":117,"140":142,"144":143,"205":144,"1124":12,"1135":145,"1137":145,"1149":136,"1178":137,"1322":129,"1323":146,"1324":147,"1332":148,"1340":149},"996":{"18":176,"39":151,"48":153,"51":154,"117":156,"120":157,"126":177,"127":158,"129":178,"134":160,"138":12,"140":12,"144":161,"205":167,"1124":179,"1135":180,"1137":180,"1149":181,"1178":183,"1322":174,"1323":184,"1324":182,"1332":12,"1340":185},"1107":{"175":186,"1000":198,"1008":201,"1010":199,"1012":187,"1061":190,"1071":193,"1073":194,"1078":195,"1081":202,"1106":197,"1321":200}},"ajudev":{"344":{"18":50,"39":1,"48":51,"51":3,"117":10,"120":12,"126":43,"127":52,"129":44,"134":53,"138":14,"140":15,"144":16,"205":54,"1124":45,"1135":55,"1137":55,"1149":48,"1178":49,"1322":37,"1323":56,"1324":57,"1332":58,"1340":59},"654":{"18":60,"39":62,"48":64,"51":12,"117":96,"120":97,"126":90,"127":98,"129":91,"134":99,"138":70,"140":100,"144":101,"205":102,"1124":12,"1135":103,"1137":103,"1149":94,"1178":104,"1322":87,"1323":105,"1324":106,"1332":107,"1340":108},"900":{"18":138,"39":12,"48":110,"51":111,"117":115,"120":139,"126":132,"127":140,"129":133,"134":141,"138":117,"140":142,"144":143,"205":144,"1124":12,"1135":145,"1137":145,"1149":136,"1178":137,"1322":129,"1323":146,"1324":147,"1332":148,"1340":149},"996":{"18":176,"39":151,"48":153,"51":154,"117":156,"120":157,"126":177,"127":158,"129":178,"134":160,"138":12,"140":12,"144":161,"205":167,"1124":179,"1135":180,"1137":180,"1149":181,"1178":183,"1322":174,"1323":184,"1324":182,"1332":12,"1340":185},"1107":{"175":186,"1000":198,"1008":201,"1010":199,"1012":187,"1061":190,"1071":193,"1073":194,"1078":195,"1081":202,"1106":197,"1321":200}}},[{"19":31,"20":32,"21":31,"22":31,"23":6,"24":33,"25":6,"26":32,"27":1,"28":34,"29":35,"30":36,"31":37,"32":1,"33":38,"34":38,"35":39},{"37":31,"38":2},{"40":43},{"49":31,"50":71},{"52":73},{"54":1,"55":1,"56":74,"57":75,"58":31,"59":31,"60":31,"61":1,"62":76,"63":77,"64":78,"65":1,"66":1,"67":79,"68":1,"69":80,"70":1,"71":1,"72":1,"73":81,"74":82,"75":83,"76":84,"77":83,"78":85,"79":86,"80":87,"81":88,"82":89,"83":88,"84":90,"85":1,"86":1,"87":31,"88":91,"89":92,"90":93,"91":94,"92":95,"93":96,"94":1,"95":97,"96":1},{"98":134,"99":135},{"101":137,"102":37},{"104":138},{"64":74,"95":97,"105":1,"106":2,"107":141,"108":142,"109":143},{"20":32,"111":145,"112":146,"113":1,"114":37,"115":31,"116":147},{"108":151,"118":151},{},{"50":205,"129":204},{"135":228,"136":229,"137":230},{"139":73},{"143":252},{"145":1,"146":261,"147":262,"148":263,"149":1,"150":264,"151":1,"152":265,"153":266,"154":267},{"156":277,"157":1,"158":278},{"160":31,"161":31,"162":31,"163":1,"164":1,"165":1,"166":1,"167":286,"168":1,"169":287,"170":1,"171":288,"172":1,"173":289,"174":1,"175":5,"176":1,"177":1,"178":290,"179":1,"180":291},{"182":332,"183":333,"184":1,"185":1},{"187":337,"188":338},{"197":359},{"208":381,"209":382,"210":2},{"226":400,"227":151,"228":97,"229":401,"230":5,"231":82,"232":4,"233":402,"234":403,"235":92,"236":82,"237":92,"238":4,"239":404,"240":405,"241":92,"242":92,"243":406,"244":407,"245":408,"246":409},{"248":395,"249":421},{"251":423,"252":4,"253":88},{"255":424,"256":425,"257":82,"258":82,"259":426,"260":425,"261":82,"262":427,"263":406,"264":406,"265":428,"266":429},{"268":151,"269":1,"270":442,"271":443,"272":444},{"219":447,"274":1,"275":445,"276":446,"277":448},{"88":451,"279":82},{"281":453,"282":454,"283":455,"284":456,"285":279},{"287":460,"288":461},{"247":462,"290":82,"291":1},{"293":471},{"296":1,"297":37,"298":477,"299":478},{"301":488,"302":97,"303":1,"304":1},{"308":508,"309":509},{"326":552,"327":553,"328":554},{"20":569,"26":569,"116":147,"333":31,"334":448},{"336":6,"337":31,"338":574},{"340":575,"341":575},{"311":31,"312":759,"313":408,"314":1,"315":760,"316":761,"317":762,"318":763,"319":521,"320":764,"321":765,"322":2,"323":2,"324":766},{"121":845,"122":161,"123":162,"124":163,"125":848,"1120":846,"1121":847},{"1122":867},{"20":151,"22":31},{"199":1,"200":151,"1131":915,"1132":916,"1133":74,"1134":73},{"1133":74,"1134":73},{"190":1,"194":938,"1139":1,"1140":931,"1141":932,"1142":1,"1143":933,"1144":934,"1145":2,"1146":935,"1147":936,"1148":937},{"0":1111,"175":1113,"202":1112,"1176":1110,"1177":1},{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":1172,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},{"0":49,"42":31,"43":31,"44":50,"45":51,"46":866,"47":866},{"141":1193,"142":241},{"130":1,"131":1187,"132":212,"133":213},{"199":1,"200":364,"201":31,"202":97,"203":1,"204":1180},{"199":1,"200":151,"1131":1176,"1132":916,"1133":74,"1134":73},{"1160":1093,"1161":1094,"1162":1210,"1163":1,"1164":960},{"1166":1099,"1167":960,"1168":82,"1169":1100,"1170":1101,"1171":1215,"1172":1103,"1173":1216,"1174":1105},{"1151":1224,"1152":1226,"1153":964,"1325":1,"1326":1225,"1327":82,"1328":82,"1329":963,"1330":1227,"1331":82},{"1150":73,"1154":1238,"1155":1232,"1156":1233,"1178":1235,"1333":1231,"1334":1234,"1335":1236,"1336":1237,"1337":1238,"1338":1239,"1339":1240},{"345":17,"346":18,"347":19,"348":19,"349":20,"350":21,"351":22,"352":17,"353":23,"354":23,"355":19},{"356":40,"357":40,"358":41},{"359":42},{"360":44,"361":45,"362":44,"363":46,"364":44},{"363":55,"365":54,"366":54,"367":56,"368":57,"369":58,"370":59,"371":60,"372":61},{"373":98,"374":99,"375":100,"376":101,"377":102,"378":103,"379":104,"380":105,"381":104,"382":106,"383":107,"384":108,"385":104,"386":104,"387":109,"388":110,"389":104,"390":111,"391":112,"392":100,"393":110,"394":113,"395":114,"396":115,"397":116,"398":106,"399":117,"400":118,"401":119,"402":120},{"403":139},{"404":144,"405":104},{"356":148,"357":148,"406":149},{"434":104,"435":176,"436":206,"437":207,"438":208,"439":209},{"450":231,"451":232,"452":232,"453":232,"454":233},{"474":268,"475":269,"476":270,"477":271,"478":272},{"479":280,"480":281,"481":282},{"374":294,"375":295,"376":297,"378":300,"379":305,"482":293,"483":104,"484":296,"485":298,"486":299,"487":301,"488":302,"489":303,"490":304,"491":306,"492":307,"493":308,"494":309,"495":310,"496":311,"497":305,"498":305,"499":312,"500":313,"501":313,"502":305},{"503":104,"504":104,"505":334},{"506":339,"507":340,"508":341,"509":342,"510":343,"511":344},{"575":410,"576":411,"577":412,"578":411,"579":413,"580":414,"581":415,"582":416,"583":417},{"584":422},{"585":430,"586":431,"587":432,"588":433,"589":434,"590":434,"591":435,"592":436,"593":437,"594":437,"595":438},{"596":104},{"597":452},{"598":457,"599":457},{"504":465,"600":463,"601":464,"602":466,"603":413,"604":104,"605":413,"606":410,"607":411},{"608":472,"609":413,"610":413},{"617":479,"618":480,"619":104},{"485":489,"620":490,"621":491,"622":44,"623":44,"624":489,"625":492,"626":44,"627":493},{"628":503,"629":504,"630":505},{"631":510,"632":511,"633":104,"634":512},{"649":556,"650":557},{"635":767,"636":768,"637":768,"638":769,"639":770,"640":529,"641":771,"642":771,"643":772,"644":772,"645":532,"646":772,"647":773,"648":774},{"413":168,"414":169,"415":170,"416":104,"417":171,"418":172,"419":173,"420":45,"421":174,"422":175,"423":176,"424":177,"425":177,"426":178,"427":104,"428":179,"429":849,"430":850,"431":182,"432":182,"433":182,"1183":182},{"360":104,"436":868,"1184":869,"1185":870},{"506":920,"638":918,"1186":917,"1187":919,"1188":921,"1189":922},{"1190":928,"1191":928,"1192":929,"1193":930,"1194":236,"1195":928,"1196":104},{"488":949,"506":941,"507":945,"508":104,"509":176,"510":44,"511":946,"1187":939,"1197":940,"1198":942,"1199":943,"1200":943,"1201":943,"1202":944,"1203":921,"1204":942,"1205":104,"1206":947,"1207":948},{"361":1118,"363":1119,"364":1120,"366":1118,"372":1117,"485":1114,"488":1123,"622":1130,"1208":1116,"1220":1115,"1221":1121,"1222":1122,"1223":1126,"1224":1127,"1225":465,"1226":465,"1227":465,"1228":465,"1229":465,"1230":1120,"1231":465,"1232":465,"1233":1124,"1234":465,"1235":1125,"1236":1128,"1237":1129,"1238":465,"1239":1131,"1240":1120,"1241":1120,"1242":1120},{"356":1174,"357":1174,"406":149},{"407":1205,"408":1206,"409":1205,"410":1207,"411":1205,"412":1184},{"460":1194,"461":1195,"462":1195,"463":104,"464":1196,"465":1197,"466":246,"467":246,"468":247,"469":1198},{"440":1188,"441":216,"442":1189,"443":218,"444":1190,"445":1191,"446":221,"447":222,"448":223,"449":218},{"455":1183,"456":1184,"457":236,"458":1185,"459":104},{"470":1202,"471":1203,"472":255,"473":256},{"522":366,"523":367,"524":1181,"525":44,"526":44,"527":44},{"506":920,"638":1177,"1186":917,"1187":1178,"1188":921,"1189":922},{"361":1118,"363":1119,"364":1120,"366":1118,"367":1175,"372":1117,"485":1114,"488":1123,"622":1130,"1208":1116,"1220":1115,"1221":1121,"1222":1122,"1223":1126,"1224":1127,"1225":465,"1226":465,"1227":465,"1228":465,"1229":465,"1230":1120,"1231":465,"1232":465,"1233":1124,"1234":465,"1235":1125,"1236":1128,"1237":1129,"1238":465,"1239":1131,"1240":1120,"1241":1120,"1242":1120},{"1211":991,"1212":1211,"1213":993,"1214":1212,"1215":1213},{"1216":1217,"1217":1218,"1218":1219,"1219":1219},{"1341":1228,"1342":104},{"1210":981,"1343":1241,"1344":1242,"1345":1243,"1346":1244,"1347":1245,"1348":1246,"1349":1152,"1350":1247,"1351":1152,"1352":1152,"1353":1248,"1354":1249},{"662":47,"663":48,"664":47},{"277":66,"665":62,"666":63,"667":64,"668":65,"669":66,"670":66,"671":67,"672":66,"673":66,"674":66,"675":66,"676":66,"677":66,"678":66,"679":68,"680":69,"681":69,"682":66,"683":66,"684":66,"685":70},{"686":72},{"702":136},{"703":140},{"704":125},{"705":150,"706":26,"707":26},{"731":210,"732":27},{"742":234,"743":234,"744":234},{"674":275,"688":275,"758":273,"759":274,"760":26,"761":276},{"762":283,"763":284},{"786":354,"787":355,"788":355,"789":66,"790":356,"791":48,"792":48,"793":357,"794":48,"795":357,"796":357,"797":357,"798":357,"799":355,"800":358,"801":358},{"820":418,"821":418,"822":418,"823":418,"824":419,"825":420,"826":420,"827":420},{"828":439,"829":440,"830":441,"831":440,"832":439,"833":439,"834":441},{"835":449,"836":450,"837":418},{"838":458,"839":459},{"669":469,"840":467,"841":468,"842":470},{"843":473,"844":474},{"669":483,"670":484,"845":481,"846":482,"847":485,"848":486,"849":487},{"859":506,"860":507},{"861":513,"862":26,"863":26,"864":48,"865":514,"866":514,"867":514,"868":515},{"893":558,"894":559,"895":560,"896":561},{"869":775,"870":776,"871":777,"872":778,"873":539,"874":540,"875":539,"876":539,"877":779,"878":777,"879":542,"880":780,"881":781,"882":782,"883":783,"884":784,"885":777,"886":785,"887":786,"888":786,"889":786,"890":787,"891":780,"892":551},{"714":68,"715":183,"716":183,"717":184,"718":184,"719":185,"720":186,"721":187,"722":187,"723":187,"724":190,"725":190,"726":191,"727":192,"728":193,"729":191,"730":191},{"1117":66,"1243":871,"1244":68},{"785":924,"794":925,"1245":923,"1246":925,"1247":926,"1248":926,"1249":927},{"746":26,"768":26,"1250":26,"1251":26,"1252":26,"1253":26},{"783":953,"784":27,"785":955,"797":952,"800":958,"801":958,"1245":950,"1254":950,"1255":26,"1256":951,"1257":952,"1258":952,"1259":954,"1260":925,"1261":956,"1262":957,"1263":959},{"277":1138,"676":1135,"680":1133,"684":1138,"693":1148,"764":1132,"766":1139,"800":1142,"801":1139,"1267":1137,"1268":1134,"1269":1137,"1270":1136,"1271":1144,"1285":1139,"1286":1139,"1287":1140,"1288":1141,"1289":1139,"1290":1143,"1291":1145,"1292":1139,"1293":1146,"1294":1147,"1295":1138,"1296":1148},{"655":24,"656":1173,"657":26,"658":27,"659":27,"660":28,"661":29},{"708":1208,"709":26,"710":26,"711":26,"712":1209,"713":1199},{"749":1199,"750":1200,"751":250,"752":1201,"753":1201},{"733":224,"734":224,"735":1192,"736":226,"737":227,"738":227,"739":227,"740":227,"741":227},{"745":1186,"746":239,"747":26,"748":1186},{"754":257,"755":258,"756":1204,"757":260},{"672":373,"805":369,"806":370,"807":371,"808":372,"809":374,"810":375,"811":1182,"812":48,"813":48,"814":48,"815":48},{"785":924,"794":925,"1245":923,"1246":925,"1247":1179,"1248":1179,"1249":927},{"1272":1096,"1273":1097,"1274":1214,"1275":1214,"1355":27},{"1276":1220,"1277":1220,"1278":1220,"1279":1220,"1280":1220,"1281":1221,"1282":1222,"1283":1223,"1284":1223},{"1265":1229,"1266":1230,"1356":1230,"1357":1230,"1358":1230},{"1264":1000,"1359":1250,"1360":1251,"1361":1252,"1362":1253,"1363":1253,"1364":1254,"1365":1255,"1366":1139,"1367":1256,"1368":1257,"1369":1257,"1370":1258,"1371":1259},{"907":31,"908":31,"909":1,"910":1},{"911":31},{"672":31},{"912":31,"913":1,"914":1,"915":1},{"916":1},{"917":1,"918":1,"919":1,"920":1,"921":1,"922":1},{"909":1,"910":1,"923":31},{"924":1},{"937":31,"938":31,"939":1,"940":1,"941":31,"942":31},{"933":31,"934":1},{"935":214,"936":1},{"943":31,"944":31,"945":1},{"946":1,"947":1,"948":31,"949":1,"950":214,"951":1,"952":31,"953":31,"954":31,"955":1,"956":1,"957":214,"958":1,"959":1},{"960":279},{"961":292,"962":1,"963":1},{"964":1,"965":1},{"966":31,"967":1,"968":1,"969":1,"970":350},{"961":292,"971":1,"972":1,"973":1,"974":1},{"975":31},{"961":292,"976":31,"977":1},{"978":31,"979":31},{"980":1,"981":1},{"982":1,"983":1,"984":1,"985":1},{"961":292,"986":31,"987":1},{"990":1,"991":1},{"992":1,"993":1,"994":555,"995":555},{"901":13,"902":14,"903":1,"904":15,"905":670,"906":1},{"925":31,"926":31,"927":31,"928":1,"929":1,"930":1,"931":1,"932":1},{"933":31},{"1297":31},{"1298":214},{"964":1,"965":1,"1299":1,"1300":1,"1301":1,"1302":31,"1303":2,"1304":1,"1305":1,"1306":1,"1307":1,"1308":1},{"961":292,"1314":1},{"1311":31,"1312":1,"1315":1,"1316":31,"1317":31,"1318":31,"1319":31},{"1313":1,"1372":292},{"961":292},{"1001":581,"1002":582,"1003":583},{"1011":589},{"1049":624,"1050":625,"1051":626,"1052":627,"1053":628},{"1055":629,"1056":629},{"1047":632,"1058":630,"1059":631,"1060":633},{"1047":636,"1059":637,"1062":634,"1063":633,"1064":635,"1065":635},{"1067":590},{"1069":638,"1070":639},{"1072":640},{"1074":641,"1075":642,"1076":643,"1077":644},{"1092":664,"1100":662,"1101":663},{"1103":665,"1104":666,"1105":667},{"997":798,"998":579,"999":580},{"1009":800},{"1067":590,"1320":633},{"1004":1261,"1005":585,"1006":586,"1007":587},{"1076":643,"1077":644,"1079":1262,"1080":1263}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","System","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","DisabledValidators","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","Parameters","CurrentIndex","QueuedChanged","QueuedKeys","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","Utility","IdentityOf","SuperOf","SubsOf","Registrars","PendingUsernames","Identity","Proxy","Recovery","Vesting","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","Key","Sudo","Proxies","Announcements","Multisigs","Multisig","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","Treasury","DelegatedStaking","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","OnDemandAssignmentProvider","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","ParasSudoWrapper","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","AssignedSlots","Coretime","Cursor","Historic","MultiBlockMigrations","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","RootTesting","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","IdentityMigrator","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","set_parameter","set_keys","purge_keys","note_stalled","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","add_registrar","set_identity","set_subs","clear_identity","request_judgement","cancel_request","set_fee","set_account_id","set_fields","provide_judgement","kill_identity","add_sub","rename_sub","remove_sub","quit_sub","add_username_authority","remove_username_authority","set_username_for","accept_username","remove_expired_approval","set_primary_username","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","sudo","sudo_unchecked_weight","set_key","sudo_as","remove_key","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","submit","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_metadata","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","spend_local","remove_approval","spend","payout","check_status","void_spend","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","sudo_schedule_para_initialize","sudo_schedule_para_cleanup","sudo_schedule_parathread_upgrade","sudo_schedule_parachain_downgrade","sudo_queue_downward_xcm","sudo_establish_hrmp_channel","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","assign_core","force_set_cursor","force_set_active_cursor","force_onboard_mbms","clear_historic","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","reap_page","execute_overweight","update","remove","set_new_genesis","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","IndexAssigned","IndexFreed","IndexFrozen","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","Offence","Updated","NewSession","NewAuthorities","Paused","Resumed","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","IdentitySet","IdentityCleared","IdentityKilled","JudgementRequested","JudgementUnrequested","JudgementGiven","RegistrarAdded","SubIdentityAdded","SubIdentityRemoved","SubIdentityRevoked","AuthorityAdded","AuthorityRemoved","UsernameSet","UsernameQueued","PreapprovalExpired","PrimaryUsernameSet","DanglingUsernameRemoved","VestingUpdated","VestingCompleted","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","Noted","Requested","Cleared","Sudid","KeyChanged","KeyRemoved","SudoAsDone","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","Unstaked","BatchChecked","BatchFinished","InternalError","Delegated","Undelegated","Voted","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","UpgradeStarted","UpgradeCompleted","UpgradeFailed","MigrationSkipped","MigrationAdvanced","MigrationCompleted","MigrationFailed","HistoricCleared","Attempted","Sent","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","batched_calls_limit","BasicDeposit","ByteDeposit","SubAccountDeposit","MaxSubAccounts","MaxRegistrars","PendingUsernameExpiration","MaxSuffixLength","MaxUsernameLength","MinVestedTransfer","MaxVestingSchedules","MaximumWeight","MaxScheduledPerBlock","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","PalletId","MaxPointsToBalance","MaxUnbonding","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","SpendPeriod","Burn","MaxApprovals","PayoutPeriod","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","DataDepositPerByte","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","CursorMaxLen","IdentifierMaxLen","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","ParachainHost","beefy_genesis","validator_set","generate_key_ownership_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","submit_report_equivocation_unsigned_extrinsic","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","build_state","get_preset","preset_names","GenesisBuilder","apis","Claims","Bounties","ChildBounties","OnDemand","StateTrieMigration","ParaSudoWrapper","propose_curator","unassign_curator","accept_curator","Claimed","ParachainSystem","ParachainInfo","UsernameAuthorities","AccountOfUsername","VestingSchedules","CollatorSelection","Aura","AuraExt","XcmpQueue","PolkadotXcm","CumulusXcm","XTokens","OrmlXcm","ProposalOf","Voting","Members","Prime","Council","CouncilMembership","TechnicalCommittee","TechnicalCommitteeMembership","PublicPropCount","PublicProps","DepositOf","LowestUnbaked","ReferendumInfoOf","VotingOf","LastTabledWasExternal","NextExternal","Blacklist","Cancellations","Democracy","Organizer","CurrentSeasonStatus","Seasons","SeasonSchedules","SeasonTradeFilters","SeasonUnlocks","PlayerSeasonConfigs","AwesomeAvatars","Nft","NftTransfer","Affiliatees","Affiliators","AffiliateRules","NextAffiliateId","AffiliateIdMapping","AffiliatesAAA","TournamentSchedules","TreasuryAccountsCache","NextTournamentIds","Tournaments","ActiveTournaments","TournamentRankings","TournamentRewardClaims","GoldenDucks","GoldenDuckRewardClaims","TournamentAAA","Asset","NextAssetId","Assets","AssetRegistry","PoolAssets","AssetConversion","AssetConversionTxPayment","remove_dangling_username","update_vesting_schedules","claim_for","set_members","propose","disapprove_proposal","close","add_member","remove_member","swap_member","reset_members","change_key","set_prime","clear_prime","second","emergency_cancel","external_propose","external_propose_majority","external_propose_default","fast_track","veto_external","cancel_referendum","clear_public_proposals","blacklist","cancel_proposal","mint","set_price","set_organizer","add_affiliation","enable_affiliator","remove_affiliation","set_rule_for","clear_rule_for","create_tournament","remove_latest_tournament","claim_tournament_reward_for","claim_golden_duck_for","force_create","transfer_ownership","set_team","approve_transfer","cancel_approval","clear_metadata","start_destroy","destroy_accounts","destroy_approvals","finish_destroy","thaw","freeze_asset","thaw_asset","force_set_metadata","force_clear_metadata","force_asset_status","force_cancel_approval","transfer_approved","touch","set_min_balance","touch_other","refund_other","block","VestingScheduleAdded","VestingSchedulesUpdated","Proposed","Disapproved","Executed","MemberExecuted","Closed","MemberAdded","MembersSwapped","MembersReset","Dummy","Tabled","ExternalTabled","Started","Passed","NotPassed","Vetoed","Blacklisted","Seconded","ProposalCanceled","MetadataTransferred","OrganizerSet","UpdatedSeason","SeasonStarted","ForceCreated","Transferred","OwnerChanged","TeamChanged","ApprovalCancelled","AccountMarkedAsAffiliatable","AccountAffiliated","RuleAdded","RuleCleared","TournamentCreated","TournamentRemoved","TournamentActivePeriodStarted","TournamentClaimPeriodStarted","TournamentEnded","EntityEnteredRanking","EntityBecameGoldenDuck","RankingRewardClaimed","GoldenDuckRewardClaimed","AssetFrozen","AssetThawed","AccountsDestroyed","ApprovalsDestroyed","DestructionStarted","ApprovedTransfer","TransferredApproved","AssetStatusChanged","AssetMinBalanceChanged","Touched","Blocked","Deposited","SlotDuration","MaxProposalWeight","EnactmentPeriod","LaunchPeriod","VotingPeriod","MinimumDeposit","InstantAllowed","FastTrackVotingPeriod","CooloffPeriod","MaxProposals","MaxDeposits","MaxBlacklisted","KeyLimit","ValueLimit","MetadataDepositBase","StringLimit","AffiliateMaxLevel","MinimumTournamentPhaseDuration","RemoveItemsLimit","AssetDeposit","AssetAccountDeposit","MetadataDepositPerByte","ApprovalDeposit","slot_duration","AuraApi","Migrations","HeroJamAffiliates","HeroJamTournament","LatestSeason","FinishedSeasons","NextSeasonChain","PrevSeasonChain","SeasonMetadatas","SeasonScheduledActions","AssetSeasonRegister","HeroJamSeasons","GeneralConfigStore","PlayerSeasonStats","AssetOwners","AssetsOwnedCount","SeasonTransferFilters","AssetTradePrices","LockedAssets","HeroJamSage","update_season","interrupt_active_season","update_general_config","update_unlock_rule","upgrade_asset_inventory","update_asset_filter","transfer_asset","set_asset_price","remove_asset_price","buy_asset","lock_asset","unlock_asset","unlock_feature","state_transition","AccountUnaffiliated","SeasonEarlyStarted","SeasonEnded","SeasonEarlyEnded","UpdatedGeneralConfig","UpdatedUnlockRule","InventoryTierUpgraded","UpdatedTradeFilter","UpdatedTransferFilter","AssetTransferred","AssetPriceSet","AssetPriceUnset","AssetTraded","AssetLocked","AssetUnlocked","FeatureUnlocked","TransitionExecuted","WhitelistKey"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Wnd = getChainDescriptors("wnd");
    Pas = getChainDescriptors("pas");
    Aju = getChainDescriptors("aju");
    Ajusage = getChainDescriptors("ajusage");
    Ajudev = getChainDescriptors("ajudev");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    "use strict";
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  AssetRateEvent: () => AssetRateEvent,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesBountyStatus: () => BountiesBountyStatus,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  CandidateEvent: () => CandidateEvent,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingEvent: () => ConvictionVotingEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  CoreState: () => CoreState,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IdentityData: () => IdentityData,
  IdentityJudgement: () => IdentityJudgement,
  IndicesEvent: () => IndicesEvent,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsEvent: () => NominationPoolsEvent,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionEvent: () => ParachainsInclusionEvent,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeCommonAssignedSlotsEvent: () => PolkadotRuntimeCommonAssignedSlotsEvent,
  PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart: () => PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart,
  PolkadotRuntimeCommonIdentityMigratorEvent: () => PolkadotRuntimeCommonIdentityMigratorEvent,
  PolkadotRuntimeOriginCaller: () => PolkadotRuntimeOriginCaller,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: () => PolkadotRuntimeParachainsSchedulerPalletCoreOccupied,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  RecoveryEvent: () => RecoveryEvent,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  RootTestingEvent: () => RootTestingEvent,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingEvent: () => StakingEvent,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityError: () => TransactionValidityError,
  TransactionValidityInvalidTransaction: () => TransactionValidityInvalidTransaction,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VersionedLocatableAsset: () => VersionedLocatableAsset,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin: () => WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin,
  WestendRuntimeProxyType: () => WestendRuntimeProxyType,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  WestendRuntimeRuntimeHoldReason: () => WestendRuntimeRuntimeHoldReason,
  XcmPalletOrigin: () => XcmPalletOrigin,
  XcmPalletQueryStatus: () => XcmPalletQueryStatus,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2BodyId: () => XcmV2BodyId,
  XcmV2Instruction: () => XcmV2Instruction,
  XcmV2Junction: () => XcmV2Junction,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiAssetFilter: () => XcmV2MultiAssetFilter,
  XcmV2MultiassetAssetId: () => XcmV2MultiassetAssetId,
  XcmV2MultiassetAssetInstance: () => XcmV2MultiassetAssetInstance,
  XcmV2MultiassetFungibility: () => XcmV2MultiassetFungibility,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2MultiassetWildMultiAsset: () => XcmV2MultiassetWildMultiAsset,
  XcmV2MultilocationJunctions: () => XcmV2MultilocationJunctions,
  XcmV2NetworkId: () => XcmV2NetworkId,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV2Response: () => XcmV2Response,
  XcmV2TraitsError: () => XcmV2TraitsError,
  XcmV2WeightLimit: () => XcmV2WeightLimit,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV4TraitsOutcome: () => XcmV4TraitsOutcome,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedResponse: () => XcmVersionedResponse,
  XcmVersionedXcm: () => XcmVersionedXcm,
  aju: () => aju_default,
  ajudev: () => ajudev_default,
  ajusage: () => ajusage_default,
  pas: () => pas_default,
  wnd: () => wnd_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/wnd.ts
var toBinary = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Wnd"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset };
var wnd_default = _allDescriptors;

// .papi/descriptors/src/pas.ts
var toBinary2 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Pas"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2 };
var pas_default = _allDescriptors2;

// .papi/descriptors/src/aju.ts
var toBinary3 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues3 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Aju"]);
var metadataTypes3 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary3("default" in module2 ? module2.default : module2)
);
var asset3 = {};
var _allDescriptors3 = { descriptors: descriptorValues3, metadataTypes: metadataTypes3, asset: asset3 };
var aju_default = _allDescriptors3;

// .papi/descriptors/src/ajusage.ts
var toBinary4 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues4 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Ajusage"]);
var metadataTypes4 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary4("default" in module2 ? module2.default : module2)
);
var asset4 = {};
var _allDescriptors4 = { descriptors: descriptorValues4, metadataTypes: metadataTypes4, asset: asset4 };
var ajusage_default = _allDescriptors4;

// .papi/descriptors/src/ajudev.ts
var toBinary5 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues5 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Ajudev"]);
var metadataTypes5 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary5("default" in module2 ? module2.default : module2)
);
var asset5 = {};
var _allDescriptors5 = { descriptors: descriptorValues5, metadataTypes: metadataTypes5, asset: asset5 };
var ajudev_default = _allDescriptors5;

// .papi/descriptors/src/common-types.ts
var import_polkadot_api = require("polkadot-api");
var DigestItem = import_polkadot_api._Enum;
var Phase = import_polkadot_api._Enum;
var DispatchClass = import_polkadot_api._Enum;
var BagsListListListError = import_polkadot_api._Enum;
var TokenError = import_polkadot_api._Enum;
var ArithmeticError = import_polkadot_api._Enum;
var TransactionalError = import_polkadot_api._Enum;
var IndicesEvent = import_polkadot_api._Enum;
var BalanceStatus = import_polkadot_api._Enum;
var TransactionPaymentEvent = import_polkadot_api._Enum;
var StakingRewardDestination = import_polkadot_api._Enum;
var StakingForcing = import_polkadot_api._Enum;
var OffencesEvent = import_polkadot_api._Enum;
var SessionEvent = import_polkadot_api._Enum;
var GrandpaEvent = import_polkadot_api._Enum;
var RecoveryEvent = import_polkadot_api._Enum;
var VestingEvent = import_polkadot_api._Enum;
var PreimageEvent = import_polkadot_api._Enum;
var WestendRuntimeProxyType = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseElectionCompute = import_polkadot_api._Enum;
var ElectionProviderMultiPhasePhase = import_polkadot_api._Enum;
var BagsListEvent = import_polkadot_api._Enum;
var NominationPoolsPoolState = import_polkadot_api._Enum;
var NominationPoolsCommissionClaimPermission = import_polkadot_api._Enum;
var ConvictionVotingVoteAccountVote = import_polkadot_api._Enum;
var PreimagesBounded = import_polkadot_api._Enum;
var XcmV3Junctions = import_polkadot_api._Enum;
var XcmV3Junction = import_polkadot_api._Enum;
var XcmV3JunctionNetworkId = import_polkadot_api._Enum;
var XcmV3JunctionBodyId = import_polkadot_api._Enum;
var XcmV2JunctionBodyPart = import_polkadot_api._Enum;
var XcmV3MultiassetAssetId = import_polkadot_api._Enum;
var ParachainsParasEvent = import_polkadot_api._Enum;
var ParachainsHrmpEvent = import_polkadot_api._Enum;
var ParachainsDisputesEvent = import_polkadot_api._Enum;
var ParachainsDisputeLocation = import_polkadot_api._Enum;
var ParachainsDisputeResult = import_polkadot_api._Enum;
var CommonParasRegistrarEvent = import_polkadot_api._Enum;
var CommonSlotsEvent = import_polkadot_api._Enum;
var CommonAuctionsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeCommonAssignedSlotsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsCoretimeEvent = import_polkadot_api._Enum;
var XcmV3MultiassetFungibility = import_polkadot_api._Enum;
var XcmV3MultiassetAssetInstance = import_polkadot_api._Enum;
var XcmV3MaybeErrorCode = import_polkadot_api._Enum;
var XcmV2OriginKind = import_polkadot_api._Enum;
var XcmV2MultiassetWildFungibility = import_polkadot_api._Enum;
var XcmV3WeightLimit = import_polkadot_api._Enum;
var ParachainsInclusionAggregateMessageOrigin = import_polkadot_api._Enum;
var ParachainsInclusionUmpQueueId = import_polkadot_api._Enum;
var RootTestingEvent = import_polkadot_api._Enum;
var PolkadotRuntimeCommonIdentityMigratorEvent = import_polkadot_api._Enum;
var BabeDigestsNextConfigDescriptor = import_polkadot_api._Enum;
var BabeAllowedSlots = import_polkadot_api._Enum;
var BabeDigestsPreDigest = import_polkadot_api._Enum;
var BalancesTypesReasons = import_polkadot_api._Enum;
var PreimagePalletHoldReason = import_polkadot_api._Enum;
var WestendRuntimeRuntimeFreezeReason = import_polkadot_api._Enum;
var NominationPoolsPalletFreezeReason = import_polkadot_api._Enum;
var TransactionPaymentReleases = import_polkadot_api._Enum;
var GrandpaStoredState = import_polkadot_api._Enum;
var IdentityJudgement = import_polkadot_api._Enum;
var IdentityData = import_polkadot_api._Enum;
var Version = import_polkadot_api._Enum;
var DispatchRawOrigin = import_polkadot_api._Enum;
var WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin = import_polkadot_api._Enum;
var ParachainsOrigin = import_polkadot_api._Enum;
var PreimageOldRequestStatus = import_polkadot_api._Enum;
var PreimageRequestStatus = import_polkadot_api._Enum;
var NominationPoolsClaimPermission = import_polkadot_api._Enum;
var ConvictionVotingVoteVoting = import_polkadot_api._Enum;
var VotingConviction = import_polkadot_api._Enum;
var TraitsScheduleDispatchTime = import_polkadot_api._Enum;
var TreasuryPaymentState = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = import_polkadot_api._Enum;
var PolkadotPrimitivesV6PvfPrepKind = import_polkadot_api._Enum;
var PvfExecKind = import_polkadot_api._Enum;
var ValidityAttestation = import_polkadot_api._Enum;
var PolkadotPrimitivesV6DisputeStatement = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = import_polkadot_api._Enum;
var InvalidDisputeStatementKind = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = import_polkadot_api._Enum;
var ParachainsParasParaLifecycle = import_polkadot_api._Enum;
var UpgradeGoAhead = import_polkadot_api._Enum;
var UpgradeRestriction = import_polkadot_api._Enum;
var SlashingOffenceKind = import_polkadot_api._Enum;
var BrokerCoretimeInterfaceCoreAssignment = import_polkadot_api._Enum;
var MultiSigner = import_polkadot_api._Enum;
var CommonCrowdloanLastContribution = import_polkadot_api._Enum;
var XcmV3Response = import_polkadot_api._Enum;
var XcmV3TraitsError = import_polkadot_api._Enum;
var XcmV4Response = import_polkadot_api._Enum;
var XcmPalletVersionMigrationStage = import_polkadot_api._Enum;
var ReferendaTypesCurve = import_polkadot_api._Enum;
var MultiAddress = import_polkadot_api._Enum;
var BalancesAdjustmentDirection = import_polkadot_api._Enum;
var StakingPalletConfigOpBig = import_polkadot_api._Enum;
var StakingPalletConfigOp = import_polkadot_api._Enum;
var GrandpaEquivocation = import_polkadot_api._Enum;
var MultiSignature = import_polkadot_api._Enum;
var NominationPoolsBondExtra = import_polkadot_api._Enum;
var NominationPoolsConfigOp = import_polkadot_api._Enum;
var XcmV3Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetMultiAssetFilter = import_polkadot_api._Enum;
var XcmV3MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV4Instruction = import_polkadot_api._Enum;
var XcmV4AssetAssetFilter = import_polkadot_api._Enum;
var XcmV4AssetWildAsset = import_polkadot_api._Enum;
var PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart = import_polkadot_api._Enum;
var TransactionValidityUnknownTransaction = import_polkadot_api._Enum;
var TransactionValidityTransactionSource = import_polkadot_api._Enum;
var OccupiedCoreAssumption = import_polkadot_api._Enum;
var MmrPrimitivesError = import_polkadot_api._Enum;
var StakingEvent = import_polkadot_api._Enum;
var VersionedLocatableAsset = import_polkadot_api._Enum;
var XcmVersionedLocation = import_polkadot_api._Enum;
var XcmV2MultilocationJunctions = import_polkadot_api._Enum;
var XcmV2Junction = import_polkadot_api._Enum;
var XcmV2NetworkId = import_polkadot_api._Enum;
var XcmV2BodyId = import_polkadot_api._Enum;
var ConvictionVotingEvent = import_polkadot_api._Enum;
var CommonClaimsEvent = import_polkadot_api._Enum;
var BountiesEvent = import_polkadot_api._Enum;
var ChildBountiesEvent = import_polkadot_api._Enum;
var NominationPoolsEvent = import_polkadot_api._Enum;
var ParachainsInclusionEvent = import_polkadot_api._Enum;
var XcmV4TraitsOutcome = import_polkadot_api._Enum;
var XcmVersionedAssets = import_polkadot_api._Enum;
var XcmV2MultiassetAssetId = import_polkadot_api._Enum;
var XcmV2MultiassetFungibility = import_polkadot_api._Enum;
var XcmV2MultiassetAssetInstance = import_polkadot_api._Enum;
var AssetRateEvent = import_polkadot_api._Enum;
var PolkadotRuntimeOriginCaller = import_polkadot_api._Enum;
var GovernanceOrigin = import_polkadot_api._Enum;
var XcmPalletOrigin = import_polkadot_api._Enum;
var ClaimsStatementKind = import_polkadot_api._Enum;
var BountiesBountyStatus = import_polkadot_api._Enum;
var ChildBountyStatus = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = import_polkadot_api._Enum;
var XcmPalletQueryStatus = import_polkadot_api._Enum;
var XcmVersionedResponse = import_polkadot_api._Enum;
var XcmV2Response = import_polkadot_api._Enum;
var XcmV2TraitsError = import_polkadot_api._Enum;
var XcmVersionedAssetId = import_polkadot_api._Enum;
var XcmVersionedXcm = import_polkadot_api._Enum;
var XcmV2Instruction = import_polkadot_api._Enum;
var XcmV2MultiAssetFilter = import_polkadot_api._Enum;
var XcmV2MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV2WeightLimit = import_polkadot_api._Enum;
var TransactionValidityError = import_polkadot_api._Enum;
var TransactionValidityInvalidTransaction = import_polkadot_api._Enum;
var CoreState = import_polkadot_api._Enum;
var CandidateEvent = import_polkadot_api._Enum;
var WestendRuntimeRuntimeHoldReason = import_polkadot_api._Enum;
